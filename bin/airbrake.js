// Generated by CoffeeScript 1.9.3
(function() {
  'use strict';
  var Airbrake, EventEmitter, Q, Request, exec, os, path, stacktrace, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;

  Q = require('q');

  os = require('os');

  path = require('path');

  util = require('util');

  Request = require('request');

  stacktrace = require('stack-trace');

  exec = Q.nfbind(require('child_process').exec);

  Airbrake = (function(superClass) {
    extend(Airbrake, superClass);

    function Airbrake(server, options) {
      if (options == null) {
        options = {};
      }
      this.server = server;
      this.id = options.id;
      this.key = options.key;
      this.version = options.version;
      this.name = options.name;
      this.notifierURL = options.notifierURL;
      this.blacklist = ['dev', 'development'];
      this.context(options);
      if (options.environment) {
        this.environment = options.environment;
      }
      this.server.on('request-error', (function(_this) {
        return function(request, err) {
          return _this.notify(err, request);
        };
      })(this));
    }

    Airbrake.prototype.start = function(next) {
      if (!(this.id && this.key)) {
        return next(Error('No Project ID or API Key was given!'));
      }
      this.url = "https://airbrake.io/api/v3/projects/" + this.id + "/notices?key=" + this.key;
      return this.gitVersion().spread((function(_this) {
        return function(version) {
          if (version) {
            return _this.version = version.replace(/\n/gm, '');
          }
        };
      })(this))["finally"](function() {
        return next();
      });
    };

    Airbrake.prototype.gitVersion = function() {
      return exec('git rev-parse HEAD');
    };

    Airbrake.prototype.notify = function(err, request) {
      var backtrace, error, json, message, ref, stack, type;
      if (this.blacklist.indexOf(this.environment) > -1) {
        return;
      }
      error = err;
      if (typeof err === 'object') {
        error = err.message;
      }
      type = err.type || 'Error';
      message = err.message;
      stack = stacktrace.parse(err);
      backtrace = stack.map(function(s) {
        return {
          file: s.getFileName(),
          line: s.getLineNumber(),
          "function": s.getFunctionName() || s.getMethodName()
        };
      });
      json = this.buildJSON({
        url: request != null ? (ref = request.url) != null ? ref.path : void 0 : void 0,
        error: {
          type: type,
          message: message,
          backtrace: backtrace
        }
      });
      return Request.post({
        url: this.url,
        json: json
      }, (function(_this) {
        return function(e, r, body) {
          if (e) {
            return _this.emit('error', e);
          }
          return _this.emit('sent', body);
        };
      })(this));
    };

    Airbrake.prototype.context = function(options) {
      if (options == null) {
        options = {};
      }
      this.os = (os.hostname()) + " " + (os.type()) + " " + (os.platform()) + " " + (os.arch()) + " " + (os.release());
      this.language = "Node " + process.version;
      this.environment = options.environment || options.env || process.env.NODE_ENV || process.env.ENV || 'development';
      return this.rootDirectory = path.dirname(require.main.filename);
    };

    Airbrake.prototype.buildJSON = function(data) {
      return {
        notifier: {
          name: this.name,
          version: this.version,
          url: this.notifierURL
        },
        errors: [data.error],
        context: {
          os: this.os,
          language: this.language,
          url: data.url,
          environment: this.environment,
          rootDirectory: this.rootDirectory,
          version: this.version
        }
      };
    };

    return Airbrake;

  })(EventEmitter);

  module.exports = Airbrake;

}).call(this);
